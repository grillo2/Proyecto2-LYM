// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/Proyect.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class Proyect {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=12;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=13;
      Object coder=$fix(Proyect.createCoder());
      $line=14;
      Object decoder=$fix(Proyect.createDecoder());
      $line=15;
      Utilities.testCodeDecode($cast(gold.structures.automaton.ITransducer.class,coder),$cast(gold.structures.automaton.ITransducer.class,decoder));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"main",$line);
    }
  }
  public static ITransducer createCoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=22;
      Object In=$fix($opIntvlY('a','z'));
      $line=23;
      Object Set2=$fix($opIntvlY(0,7));
      $line=24;
      Object Set3=$fix($opIntvlY('0','7'));
      $line=25;
      gold.structures.set.ISet $v1=$newSet();
      $v2:for (Object start:GCollections.unmodifiableCollection($opUnionY(In,GCollections.asSet("")))) {
        for (Object pos:GCollections.unmodifiableCollection(Set2)) {
          gold.structures.set.ISet $v3=$newSet();
          int $v5=$int(0);
          int $v6=$int(pos);
          $v4:for (int i=$v5; i<=$v6; i++) {
            $v3.add(i);
          }
          for (Object times:GCollections.unmodifiableCollection($v3)) {
            $v1.add(GCollections.asList(start,pos,times));
          }
        }
      }
      Object Q=$fix($opUnionY($v1,GCollections.asSet(0)));
      $line=26;
      Object Out=$fix($opUnionY($opUnionY(In,Set3),GCollections.asSet('$')));
      $line=27;
      Object q_0=$fix(GCollections.asList("",7,0));
      $line=28;
      gold.structures.set.ISet $v7=$newSet();
      $v8:for (Object start:GCollections.unmodifiableCollection($opUnionY(In,GCollections.asSet("")))) {
        for (Object pos:GCollections.unmodifiableCollection(GCollections.asSet(7))) {
          gold.structures.set.ISet $v9=$newSet();
          int $v11=$int(0);
          int $v12=$int(pos);
          $v10:for (int i=$v11; i<=$v12; i++) {
            $v9.add(i);
          }
          for (Object times:GCollections.unmodifiableCollection($v9)) {
            $v7.add(GCollections.asList(start,pos,times));
          }
        }
      }
      Object F=$fix($v7);
      $line=30;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,In,Out,q_0,F,new GMethod(Proyect.class,"\u03B4"),new GMethod(Proyect.class,"h"),new GMethod(Proyect.class,"g")});
      if (true) break $try;
      $line=32;
      $rethrow(new RuntimeException("The function \"createCoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"createCoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object h(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result="";
      if (true) break $try;
      $line=34;
      $rethrow(new RuntimeException("The function \"h(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"h",$line);
    }
    return $result;
  }
  public static Object \u03B4(Object q, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=36;
      $result=0;
      if (true) break $try;
      $line=37;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=40;
      $result="";
      if (true) break $try;
      $line=41;
      $rethrow(new RuntimeException("The function \"g(q:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"g",$line);
    }
    return $result;
  }
  public static Object \u03B4(java.lang.Iterable $v13, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v14=GCollections.unmodifiableCollection($v13).iterator();
      Object start=$v14.next();
      Object pos=$v14.next();
      Object times=$v14.next();
      $line=45;
      if ($opEqualY(pos,7)) {
        $line=45;
        $result=GCollections.asList(s,0,0);
        if (true) break $try;
      }
      else {
        $line=46;
        if ($opLesstY(pos,7)) {
          $line=47;
          if ($opEqualY(s,start)) {
            $line=47;
            $result=GCollections.asList(start,$opAdditY(pos,1),$opAdditY(times,1));
            if (true) break $try;
          }
          else {
            $line=48;
            $result=GCollections.asList(start,$opAdditY(pos,1),times);
            if (true) break $try;
          }
        }
        else {
          $line=50;
          $result=0;
          if (true) break $try;
        }
      }
      $line=52;
      $rethrow(new RuntimeException("The function \"\u03B4(\u27E8start,pos,times\u27E9:java.lang.Iterable,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(java.lang.Iterable $v15, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v16=GCollections.unmodifiableCollection($v15).iterator();
      Object start=$v16.next();
      Object pos=$v16.next();
      Object times=$v16.next();
      $line=55;
      if ($opEqualY(pos,7)) {
        $line=55;
        $result=s;
        if (true) break $try;
      }
      else {
        $line=57;
        if ($opEqualY(pos,6)) {
          $line=57;
          $result=(($opEqualY(s,start))?($opAdditY("$",$opAdditY(times,1))):($opAdditY($opAdditY($opAdditY($opAdditY($opAdditY(pos,1),""),s),"$"),times)));
          if (true) break $try;
        }
        else {
          $line=60;
          $result=(($opEqualY(s,start))?(""):($opAdditY($opAdditY($opAdditY(pos,1),""),s)));
          if (true) break $try;
        }
      }
      $line=62;
      $rethrow(new RuntimeException("The function \"g(\u27E8start,pos,times\u27E9:java.lang.Iterable,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"g",$line);
    }
    return $result;
  }
  public static ITransducer createDecoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=69;
      Object Out=$fix($opIntvlY('a','z'));
      $line=70;
      Object Set2=$fix($opIntvlY(0,7));
      $line=71;
      Object Set3=$fix($opIntvlY('0','7'));
      $line=72;
      gold.structures.set.ISet $v17=$newSet();
      $v18:for (Object start:GCollections.unmodifiableCollection($opUnionY(Out,GCollections.asSet("")))) {
        for (Object pos:GCollections.unmodifiableCollection(Set2)) {
          gold.structures.set.ISet $v19=$newSet();
          int $v21=$int(0);
          int $v22=$int(pos);
          $v20:for (int i=$v21; i<=$v22; i++) {
            $v19.add(i);
          }
          for (Object times:GCollections.unmodifiableCollection($v19)) {
            for (Object read:GCollections.unmodifiableCollection(GCollections.asSet('N','L','S'))) {
              $v17.add(GCollections.asList(start,pos,times,read));
            }
          }
        }
      }
      Object Q=$fix($opUnionY($v17,GCollections.asSet(0)));
      $line=74;
      Object In=$fix($opUnionY($opUnionY(Out,Set3),GCollections.asSet('$')));
      $line=75;
      Object F=$fix(GCollections.asSet(GCollections.asList("",7,0,'N')));
      $line=76;
      Object q_0=$fix(GCollections.asList("",7,0,'N'));
      $line=77;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,In,Out,q_0,F,new GMethod(Proyect.class,"\u03B41"),new GMethod(Proyect.class,"g1"),new GMethod(Proyect.class,"h1")});
      if (true) break $try;
      $line=78;
      $rethrow(new RuntimeException("The function \"createDecoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"createDecoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object g1(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result="";
      if (true) break $try;
      $line=80;
      $rethrow(new RuntimeException("The function \"g1(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"g1",$line);
    }
    return $result;
  }
  public static Object \u03B41(Object q, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=84;
      $result=q;
      if (true) break $try;
      $line=85;
      $rethrow(new RuntimeException("The function \"\u03B41(q:Object,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object h1(Object q, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=88;
      $result="";
      if (true) break $try;
      $line=89;
      $rethrow(new RuntimeException("The function \"h1(q:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"h1",$line);
    }
    return $result;
  }
  public static Object \u03B41(java.lang.Iterable $v23, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v24=GCollections.unmodifiableCollection($v23).iterator();
      Object start=$v24.next();
      Object pos=$v24.next();
      Object times=$v24.next();
      Object read=$v24.next();
      $line=92;
      Object Num=$fix($opIntvlY('0','7'));
      $line=93;
      Object Letr=$fix($opIntvlY('a','z'));
      $line=95;
      Object inputValue=$fix((($opMembrY(input,Num))?($invokeMethod(Character.class,"getNumericValue",true,null,new Object[]{input})):(input)));
      $line=99;
      if (((((($bool(($opMembrY(input,Num)&&$opEqualY(read,'N')))||$bool(($opMembrY(input,Letr)&&$opEqualY(read,'L'))))||$bool(($opEqualY(input,'$')&&!$opEqualY(read,'L'))))||$bool(($opEqualY(read,'S')&&!$opEqualY(inputValue,times))))||$bool((($opLesstY(pos,7)&&$opEqualY(read,'N'))&&$opEqualY(input,start))))||$bool($opGreatY(times,pos)))) {
        $line=104;
        $result=0;
        if (true) break $try;
      }
      $line=106;
      if ($opEqualY(input,'$')) {
        $line=106;
        $result=GCollections.asList(start,7,$opAdditY(times,$opSubtrY(7,pos)),'S');
        if (true) break $try;
      }
      else {
        $line=107;
        if (($opEqualY(pos,7)&&$opEqualY(read,'N'))) {
          $line=108;
          $result=GCollections.asList(input,0,0,'L');
          if (true) break $try;
        }
        else {
          $line=109;
          if (($opLesstY(pos,7)&&$opEqualY(read,'L'))) {
            $line=110;
            Object value=$fix($opSubtrY(inputValue,$opAdditY(pos,1)));
            $line=111;
            $result=(($opGreaqY(value,0))?(GCollections.asList(start,$opAdditY(pos,value),$opAdditY(times,value),'N')):(0));
            if (true) break $try;
          }
          else {
            $line=112;
            if (($opLesstY(pos,7)&&$opEqualY(read,'N'))) {
              $line=113;
              $result=GCollections.asList(start,$opAdditY(pos,1),times,'L');
              if (true) break $try;
            }
            else {
              $line=114;
              if ($opEqualY(read,'S')) {
                $line=115;
                $result=GCollections.asList("",7,0,'N');
                if (true) break $try;
              }
              else {
                $line=116;
                $result=0;
                if (true) break $try;
              }
            }
          }
        }
      }
      $line=118;
      $rethrow(new RuntimeException("The function \"\u03B41(\u27E8start,pos,times,read\u27E9:java.lang.Iterable,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object h1(java.lang.Iterable $v25, Object input) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v26=GCollections.unmodifiableCollection($v25).iterator();
      Object start=$v26.next();
      Object pos=$v26.next();
      Object times=$v26.next();
      Object read=$v26.next();
      $line=121;
      Object Num=$fix($opIntvlY('0','7'));
      $line=122;
      Object Letr=$fix($opIntvlY('a','z'));
      $line=124;
      Object inputValue=$fix((($opMembrY(input,Num))?($invokeMethod(Character.class,"getNumericValue",true,null,new Object[]{input})):(input)));
      $line=127;
      if (((((($bool(($opMembrY(input,Num)&&$opEqualY(read,'N')))||$bool(($opMembrY(input,Letr)&&$opEqualY(read,'L'))))||$bool(($opEqualY(input,'$')&&!$opEqualY(read,'L'))))||$bool(($opEqualY(read,'S')&&!$opEqualY(inputValue,times))))||$bool((($opLesstY(pos,7)&&$opEqualY(read,'N'))&&$opEqualY(input,start))))||$bool($opGreatY(times,pos)))) {
        $line=133;
        $result="";
        if (true) break $try;
      }
      $line=136;
      if (($opEqualY(pos,7)&&$opEqualY(read,'N'))) {
        $line=136;
        $result=$opAdditY($opAdditY("",input),"");
        if (true) break $try;
      }
      else {
        $line=138;
        if (($opLesstY(pos,7)&&$opEqualY(read,'L'))) {
          $line=139;
          Object value=$fix((($opEqualY(inputValue,'$'))?($opSubtrY(7,pos)):($opSubtrY(inputValue,$opAdditY(pos,1)))));
          $line=140;
          Object str=$fix("");
          $line=141;
          while (true) {
            if (!($opGreatY(value,0))) break;
            $line=142;
            str=$fix($opAdditY($opAdditY($opAdditY("",str),start),""));
            $line=143;
            value=$fix($opSubtrY(value,1));
          }
          $line=145;
          $result=str;
          if (true) break $try;
        }
        else {
          $line=147;
          if (($opLesstY(pos,7)&&$opEqualY(read,'N'))) {
            $line=147;
            $result=(($opEqualY(input,start))?(""):($opAdditY($opAdditY("",input),"")));
            if (true) break $try;
          }
          else {
            $line=149;
            if ($opEqualY(read,'S')) {
              $line=150;
              Object value1=$fix((($opEqualY(inputValue,'$'))?($opSubtrY(7,pos)):($opSubtrY(inputValue,$opAdditY(pos,1)))));
              $line=151;
              Object str1=$fix("");
              $line=152;
              while (true) {
                if (!($opGreatY(value1,0))) break;
                $line=153;
                str1=$fix($opAdditY($opAdditY($opAdditY("",str1),start),""));
                $line=154;
                value1=$fix($opSubtrY(value1,1));
              }
              $line=156;
              $result=str1;
              if (true) break $try;
            }
            else {
              $line=157;
              $result="";
              if (true) break $try;
            }
          }
        }
      }
      $line=160;
      $rethrow(new RuntimeException("The function \"h1(\u27E8start,pos,times,read\u27E9:java.lang.Iterable,input:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,Proyect.class,"h1",$line);
    }
    return $result;
  }
}
